package com.tle.integration

import java.net.URI
import scala.util.Try

package object util {

  /**
    * Helper function for dealing with params sent the servlet endpoint. On the expectation that
    * all the params are a one-to-one value - so navigates around the need to handle the potential
    * list.
    *
    * @param params a collection of params received at one of the servlet request handlers.
    * @return a function which has wrapped over the `params` and can now be used simply with the
    *         name of an expected parameter. The function will return `None` if the param is not
    *         present
    */
  def getParam(params: Map[String, Array[String]]): String => Option[String] =
    (param: String) => params.get(param).flatMap(_.headOption)

  /**
    * Helper function for dealing with URI params, building on top of getParam. It takes the function
    * created from a call to getParam.
    *
    * @param param a function generated by `getParam`
    * @return a function which can be used to extract URI parameters from a list of params
    */
  def getUriParam(param: String => Option[String]): String => Option[URI] =
    (p: String) => param(p).flatMap(maybeUri => Try(new URI(maybeUri)).toOption)
}
